	jmp skipf0x55773879d490
Factorial:
	pop cx
	pop [bx+0]
	push cx
	push [bx+0]
	push 1.000000
	jbl relt0x55773879d010
	push 0
	jmp rels0x55773879d010
relt0x55773879d010:
	push 1
rels0x55773879d010:
	push 0
	jne if_t0x55773879cf50:
	jmp if_e0x55773879cf50
if_t0x55773879cf50:
	push 1.000000
	pop ax
	ret
if_e0x55773879cf50:
	push [bx+0]
	push [bx+0]
	push 1.000000
	sub
	push bx
	push 1
	add
	pop bx
	call Factorial
	push bx
	push 1
	sub
	pop bx
	push ax
	mul
	pop ax
	ret
skipf0x55773879d490:
	jmp skipf0x55773879e1d0
pow:
	pop cx
	pop [bx+0]
	pop [bx+1]
	push cx
	push [bx+1]
	push 0.000000
	je relt0x55773879d810
	push 0
	jmp rels0x55773879d810
relt0x55773879d810:
	push 1
rels0x55773879d810:
	push 0
	jne if_t0x55773879d750:
	jmp if_e0x55773879d750
if_t0x55773879d750:
	push 1.000000
	pop ax
	ret
if_e0x55773879d750:
	push [bx+0]
	pop [bx+2]
while0x55773879db10:
	push [bx+1]
	push 2.000000
	jal relt0x55773879dfd0
	push 0
	jmp rels0x55773879dfd0
relt0x55773879dfd0:
	push 1
rels0x55773879dfd0:
	push 0
	jne wskip0x55773879db10
	jmp wend0x55773879db10
wskip0x55773879db10:
	push [bx+0]
	push [bx+2]
	mul
	pop [bx+0]
	push [bx+1]
	push 1.000000
	sub
	pop [bx+1]
	jmp while0x55773879db10
wend0x55773879db10:
	push [bx+0]
	pop ax
	ret
skipf0x55773879e1d0:
	jmp skipf0x55773879fc50
sin:
	pop cx
	pop [bx+0]
	push cx
	push 0.000000
	pop [bx+1]
	push 0.000000
	pop [bx+2]
	push 0.000000
	pop [bx+3]
while0x55773879e750:
	push [bx+2]
	push 10.000000
	jbl relt0x55773879fa50
	push 0
	jmp rels0x55773879fa50
relt0x55773879fa50:
	push 1
rels0x55773879fa50:
	push 0
	jne wskip0x55773879e750
	jmp wend0x55773879e750
wskip0x55773879e750:
	push [bx+2]
	push 2.000000
	mul
	push 1.000000
	add
	push [bx+0]
	push bx
	push 4
	add
	pop bx
	call pow
	push bx
	push 4
	sub
	pop bx
	push ax
	pop [bx+4]
	push [bx+4]
	out
	push [bx+4]
	push 2.000000
	push [bx+2]
	mul
	push 1.000000
	add
	push bx
	push 5
	add
	pop bx
	call Factorial
	push bx
	push 5
	sub
	pop bx
	push ax
	div
	pop [bx+4]
	push [bx+3]
	push 1.000000
	je relt0x55773879f010
	push 0
	jmp rels0x55773879f010
relt0x55773879f010:
	push 1
rels0x55773879f010:
	push 0
	jne if_t0x55773879ef50:
	push [bx+1]
	push [bx+4]
	add
	pop [bx+1]
	push 1.000000
	pop [bx+3]
	jmp if_e0x55773879ef50
if_t0x55773879ef50:
	push [bx+1]
	push [bx+4]
	sub
	pop [bx+1]
	push 0.000000
	pop [bx+3]
if_e0x55773879ef50:
	push [bx+2]
	push 1.000000
	add
	pop [bx+2]
	jmp while0x55773879e750
wend0x55773879e750:
	push [bx+1]
	pop ax
	ret
skipf0x55773879fc50:
	push 0.000000
	pop [bx+0]
	in
	pop [bx+0]
	push [bx+0]
	push bx
	push 1
	add
	pop bx
	call sin
	push bx
	push 1
	sub
	pop bx
	push ax
	pop [bx+0]
	push [bx+0]
	out
hlt
