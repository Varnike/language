	jmp skipf0x5611afeeb440
Factorial:
	pop cx
	pop [bx+0]
	push cx
	push [bx+0]
	push 1.000000
	jbl relt0x5611afeeafc0
	push 0
	jmp rels0x5611afeeafc0
relt0x5611afeeafc0:
	push 1
rels0x5611afeeafc0:
	push 0
	jne if_t0x5611afeeaf00:
	jmp if_e0x5611afeeaf00
if_t0x5611afeeaf00:
	push 1.000000
	pop ax
	ret
if_e0x5611afeeaf00:
	push [bx+0]
	push [bx+0]
	push 1.000000
	sub
	push bx
	push 1
	add
	pop bx
	call Factorial
	push bx
	push 1
	sub
	pop bx
	push ax
	mul
	pop ax
	ret
skipf0x5611afeeb440:
	push 0.000000
	pop [bx+0]
	in
	pop [bx+0]
while0x5611afeeb6c0:
	push [bx+0]
	push 0.000000
	ja relt0x5611afeebd00
	push 0
	jmp rels0x5611afeebd00
relt0x5611afeebd00:
	push 1
rels0x5611afeebd00:
	push 0
	jne wskip0x5611afeeb6c0
	jmp wend0x5611afeeb6c0
wskip0x5611afeeb6c0:
	push [bx+0]
	push bx
	push 1
	add
	pop bx
	call Factorial
	push bx
	push 1
	sub
	pop bx
	push ax
	pop [bx+1]
	push [bx+0]
	push 1.000000
	sub
	pop [bx+0]
	push [bx+1]
	out
	jmp while0x5611afeeb6c0
wend0x5611afeeb6c0:
hlt
