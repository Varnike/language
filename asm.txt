	jmp skipf0x560cb86cb510
Factorial:
	pop cx
	pop [bx+0]
	push cx
	push [bx+0]
	push 1.000000
	sub
	pop [bx+1]
	push [bx+1]
	push 0.000000
	jbl relt0x560cb86cb110
	push 0
	jmp rels0x560cb86cb110
relt0x560cb86cb110:
	push 1
rels0x560cb86cb110:
	push 0
	jne if_t0x560cb86cb050:
	jmp if_e0x560cb86cb050
if_t0x560cb86cb050:
	push 1.000000
	pop ax
	ret
if_e0x560cb86cb050:
	push [bx+0]
	push [bx+1]
	push bx
	push 2
	add
	pop bx
	call Factorial
	push bx
	push 2
	sub
	pop bx
	push ax
	mul
	pop ax
	ret
skipf0x560cb86cb510:
	push 4.000000
	pop [bx+0]
	in
	pop [bx+0]
	push [bx+0]
	push bx
	push 1
	add
	pop bx
	call Factorial
	push bx
	push 1
	sub
	pop bx
	push ax
	pop [bx+0]
	push [bx+0]
	out
hlt
